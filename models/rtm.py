"""Reference Tissue Model (RTM)This module implements the Reference Tissue Model (RTM), a nonlinear PET kinetic modelthat estimates parameters using a reference region without requiring arterial input.It fits the model with four micro-parameters (R1, k2, k3, BPND) and computes one macro-parameter (k4)."""import numpy as npfrom scipy.signal import convolvefrom ..tac import TACfrom ..kineticmodel import KineticModel_NonLineardef model(reftac: TAC, R1: float, k2: float, k3: float, BPND: float):    """    Reference Tissue Model function (RTM)    Simulates tissue TACs from a reference TAC using RTM with parameters R1, k2, k3, and BPND.    Parameters:        reftac (TAC): Reference region time-activity curve (must be a single-region TAC).        R1 (float): Relative delivery (K1 / K1p).        k2 (float): Efflux rate constant from the target region.        k3 (float): Association rate constant for specific binding.        BPND (float): Binding potential, defined as k3 / k4.    Returns:        np.ndarray: Modeled TAC for the target region.        Raises:        ValueError: If reftac contains more than one region.    """        k4 = k3/BPND        g = k2+k3+k4    q = 4*k2*k4    p = np.sqrt(g**2-q)    r = k2/R1    c = (g+p)/2.0    d = (g-p)/2.0    a = (k3+k4-c)*(c-r)/p    b = (d-k3-k4)*(d-r)/p            t = reftac.t        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)        if reftac.data.shape[0] != 1:        raise ValueError("The reftac.data.shape[0] should be 1")        reftac_upsampled = np.interp(t_upsampled, t, reftac.data.flatten())        conv_upsampled = convolve(reftac_upsampled, a*np.exp(-c * t_upsampled) + b*np.exp(-d * t_upsampled), mode='full')[:len(t_upsampled)] * dt        tac_upsampled = R1 * (reftac_upsampled + conv_upsampled)        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacclass RTM_Model(KineticModel_NonLinear):    """    Reference Tissue Model (RTM) implementation using nonlinear least squares.    This class fits a 2-tissue compartment model using a reference tissue input.    It estimates R1, k2, k3, and BPND directly from TAC data, and computes k4 post hoc.    Attributes:        micro_params (dict): Micro-parameters to be estimated ('R1', 'k2', 'k3', 'BPND').        macro_params (dict): Derived macro-parameters ('k4').        param_unit (dict): Units for each parameter.        name (str): Name of the model ('RTM').    """        def __init__(self,                  reftac: TAC,                  tacs: TAC):        """        Initialize the RTM model.            Parameters:            reftac (TAC): Reference tissue TAC used as input function.            tacs (TAC): Target tissue TACs to be fitted.        """                super().__init__(reftac, tacs)                self.micro_params = {'R1': None,                              'k2': None,                              'k3': None,                             'BPND': None}        self.f_to_fit = model        self.num_micro_params = len(self.micro_params)                self.macro_params = {'k4': None}                self.param_unit = {'R1': 'unitless',                           'k2': '/min',                           'k3': '/min',                           'BPND': 'unitless',                           'k4': '/min'}                        self.name = 'RTM'                    def fit(self):        """        Fit the RTM model to the TACs using nonlinear least squares.            Performs the following:        - Fits the model using self.f_to_fit and sets micro parameters.        - Generates fitted TACs.        - Calculates fitness measures (RMSE and RÂ²).        - Computes k4 (k4 = k3 / BPND) and stores it as a macro-parameter.        """                        self.fit_nonlinear()        self.generate_fitted_tacs()        self.calculate_fitness_measures()                        # set macro params        k4_arr = np.zeros(self.tacs.num_elements)            for i in range(self.tacs.num_elements):            k3 = self.get_parameter('k3')[i]            BPND = self.get_parameter('BPND')[i]                        k4 = k3/BPND                        k4_arr[i] = k4                self.set_parameter('k4', k4_arr, 'macro')                return None