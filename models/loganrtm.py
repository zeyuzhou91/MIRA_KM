"""Logan Reference Tissue Model (LoganRTM)This module implements a linearized reference tissue model based on the Logan plot for estimating distribution volume ratio (DVR) and binding potential (BPND) without requiring arterial input function.Functions:- transform: Applies LoganRTM transformation to derive linearized variables.Classes:- LoganRTM_Model: Implements LoganRTM using linear regression on transformed TACs."""import numpy as npfrom ..typing_utils import NumpyRealNumberArrayfrom ..tac import TACfrom ..kineticmodel import KineticModel_Linear, discrete_integratedef transform(ref: NumpyRealNumberArray,              ct: NumpyRealNumberArray,              t: NumpyRealNumberArray,              k2p: float) -> (NumpyRealNumberArray, NumpyRealNumberArray):    """    Apply LoganRTM transformation for linear regression.    Parameters:        ref (np.ndarray): Reference tissue TAC, shape (N,).        ct (np.ndarray): Target tissue TAC, shape (N,).        t (np.ndarray): Time array (frame midpoints), shape (N,).        k2p (float): Tissue-to-plasma clearance rate constant of the reference region.    Returns:        tuple[np.ndarray, np.ndarray]:            - xs (np.ndarray): Scaled time, Independent variable for linear regression (RHS), shape (N-1,).            - ys (np.ndarray): Scaled time, Dependent variable for linear regression (LHS), shape (N-1,).    """        # integral of ref    intref = discrete_integrate(ref, t)  # len = N-1        # integral of ct    intct = discrete_integrate(ct, t)  # len = N-1         cts = ct[1:]  # N-1    refs = ref[1:]  # N-1            ys = intct / cts   # len = N-1    xs = (intref + refs / k2p) / cts   # len = N-1        return xs, ys                    class LoganRTM_Model(KineticModel_Linear):    """    Logan Reference Tissue Model (LoganRTM)    Implements a linearized version of the reference tissue model using Logan's     graphical approach to estimate macro-parameters such as DVR and BPND.    Attributes:        k2p (float): Clearance rate constant for the reference region.        macro_params (dict): Contains 'DVR' and 'BPND'.        param_unit (dict): Units for slope, intercept, DVR, and BPND.        name (str): Model name.    """            def __init__(self,                  reftac: TAC,                  tacs: TAC,                 k2p: float):        """        Initialize the LoganRTM_Model.            Parameters:            reftac (TAC): Reference tissue TAC object.            tacs (TAC): Target tissue TACs (multiple ROIs).            k2p (float): Clearance rate from tissue to plasma for the reference region.        """                super().__init__(reftac, tacs)                        self.k2p = k2p        self.macro_params = {'DVR': None,                             'BPND': None}                self.param_unit = {'slope': 'unitless',                           'intercept': 'min',                           'DVR': 'unitless',                           'BPND': 'unitless'}        self.name = 'LoganRTM'                    def fit(self,             t0: float | None = None,            debug: bool | None = None):        """        Fit the LoganRTM model using linear regression on transformed TACs.            Parameters:            t0 (float, optional): Start time for the linear portion of the fit in minutes.            debug (bool, optional): If True, prints diagnostic fitting information.            Sets:            - DVR: Distribution volume ratio.            - BPND: Binding potential non-displaceable.        """                self.xdata = np.zeros((self.tacs.num_elements, self.tacs.num_frames-1))        self.ydata = np.zeros((self.tacs.num_elements, self.tacs.num_frames-1))                t = self.tacs.t        ref = self.inp.data[0, :]        k2p = self.k2p        for i in range(self.tacs.num_elements):            ct = self.tacs.data[i, :]                    self.xdata[i, :], self.ydata[i, :] = transform(ref, ct, t, k2p)                                    self.fit_linear(t0 = t0,                        debug = debug)                        # set macro params        DVR_arr = np.zeros(self.tacs.num_elements)        BPND_arr = np.zeros(self.tacs.num_elements)                for i in range(self.tacs.num_elements):            slope = self.get_parameter('slope')[i]                        DVR = slope            BPND = DVR - 1                        DVR_arr[i] = DVR            BPND_arr[i] = BPND                self.set_parameter('DVR', DVR_arr, 'macro')        self.set_parameter('BPND', BPND_arr, 'macro')                return None    