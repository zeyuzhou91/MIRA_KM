"""One-Tissue Compartment Model (1TCM) Implementation for PET Kinetic ModelingThis module implements variations of the one-tissue compartment model (1TCM)for quantifying tracer kinetics using dynamic PET data. Class:- OneTCM_Model: Kinetic model class for 1TCM with nonlinear fitting and derived macro parameter computation."""import numpy as npfrom scipy.signal import convolvefrom ..arterial import BloodInputfrom ..tac import TACfrom ..kineticmodel import KineticModel_NonLineardef model_without_VB(binput: BloodInput, K1: float, k2: float):    """    One-tissue compartment model without vascular blood contribution.    Parameters:        binput (BloodInput): Blood input object providing CP(t).        K1 (float): Rate constant for plasma-to-tissue transfer [mL/min/mL].        k2 (float): Rate constant for tissue-to-plasma efflux [/min].    Returns:        np.ndarray: Simulated tissue time-activity curve (TAC).        """            t = binput.t        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        tac_upsampled = convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacdef model_with_fixed_VB(binput: BloodInput, K1: float, k2: float):    """    One-tissue compartment model with fixed blood volume contribution (VB=0.05).    Parameters:        binput (BloodInput): Blood input object with CP(t) and CB(t).        K1 (float): Rate constant for plasma-to-tissue transfer [mL/min/mL].        k2 (float): Rate constant for tissue-to-plasma efflux [/min].    Returns:        np.ndarray: Simulated tissue time-activity curve (TAC).    """        # If VB is fixed, it is usually 0.05    VB = 0.05        t = binput.t        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        cb_upsampled = binput.CB(t_upsampled)        tac_upsampled = (1-VB)*convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt + VB*cb_upsampled        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacdef model_with_variable_VB(binput: BloodInput, K1: float, k2: float, VB: float):    """    One-tissue compartment model with variable blood volume fraction.    Parameters:        binput (BloodInput): Blood input object with CP(t) and CB(t).        K1 (float): Rate constant for plasma-to-tissue transfer [mL/min/mL].        k2 (float): Rate constant for tissue-to-plasma efflux [/min].        VB (float): Blood volume fraction (unitless).    Returns:        np.ndarray: Simulated tissue time-activity curve (TAC).    """            t = binput.t        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        cb_upsampled = binput.CB(t_upsampled)        tac_upsampled = (1-VB)*convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt + VB*cb_upsampled        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacclass OneTCM_Model(KineticModel_NonLinear):    """    One-Tissue Compartment Model (1TCM) kinetic model class.    This class fits dynamic PET data using a 1TCM kinetic model. Supports    three variations:    - without VB contribution    - with fixed VB = 0.05    - with variable VB as a parameter    Attributes:        fitting_func_type (str): Specifies the model type used for fitting.        micro_params (dict): Dictionary of micro parameters ('K1', 'k2', optional 'VB').        macro_params (dict): Dictionary of macro parameters (e.g., 'VD').        param_unit (dict): Dictionary of units for all parameters.        name (str): Model name (always '1TCM').    """                def __init__(self,                  binput: BloodInput,                  tacs: TAC,                  fitting_func_type: str):        """        Initialize the 1TCM model.            Parameters:            binput (BloodInput): Blood input data (with CP and optionally CB).            tacs (TAC): Time-activity curves of the tissues to be modeled.            fitting_func_type (str): One of ['without_VB', 'with_fixed_VB', 'variable_VB'].        """                        super().__init__(binput, tacs)                self.fitting_func_type = fitting_func_type        if fitting_func_type == "without_VB":            self.micro_params = {'K1': None,                                 'k2': None}            self.f_to_fit = model_without_VB                    elif fitting_func_type == "with_fixed_VB":            self.micro_params = {'K1': None,                                 'k2': None}            self.f_to_fit = model_with_fixed_VB                    elif fitting_func_type == "variable_VB":            self.micro_params = {'K1': None,                                 'k2': None,                                 'VB': None}            self.f_to_fit = model_with_variable_VB                    self.num_micro_params = len(self.micro_params)                self.macro_params = {'VD': None}        self.param_unit = {'K1': 'mL/min/mL',                           'k2': '/min',                           'VB': 'unitless',                           'VD': 'unitless'}        self.name = '1TCM'                    def fit(self):        """            1. Fit nonlinear model using curve_fit.        2. Generate fitted TACs.        3. Calculate fitness measures (RMSE, RÂ²).        4. Compute macro parameter VD = K1 / k2 for each tissue.        """                        self.fit_nonlinear()        self.generate_fitted_tacs()        self.calculate_fitness_measures()                # set macro params        VD_arr = np.zeros(self.tacs.num_elements)        for i in range(self.tacs.num_elements):            K1 = self.get_parameter('K1')[i]            k2 = self.get_parameter('k2')[i]                        VD = K1/k2                        VD_arr[i] = VD                self.set_parameter('VD', VD_arr, 'macro')                return None                