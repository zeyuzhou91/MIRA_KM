import numpy as npfrom scipy.signal import convolvefrom ..arterial import BloodInputfrom ..core import TACfrom .kineticmodel import KineticModel_NonLineardef model_without_VB(binput: BloodInput, K1: float, k2: float):            t = binput.t        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        tac_upsampled = convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacdef model_with_fixed_VB(binput: BloodInput, K1: float, k2: float):    """    VB : the fraction of blood volume out of the total tissue volume.     """        # If VB is fixed, it is usually 0.05    VB = 0.05        t = binput.t        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        cb_upsampled = binput.CB(t_upsampled)        tac_upsampled = (1-VB)*convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt + VB*cb_upsampled        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacdef model_with_variable_VB(binput: BloodInput, K1: float, k2: float, VB: float):    """    VB : the fraction of blood volume out of the total tissue volume.     """            t = binput.t        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        cb_upsampled = binput.CB(t_upsampled)        tac_upsampled = (1-VB)*convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt + VB*cb_upsampled        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacclass OneTCM_Model(KineticModel_NonLinear):    def __init__(self,                  binput: BloodInput,                  tacs: TAC,                  fitting_func_type: str):                super().__init__(binput, tacs)                self.fitting_func_type = fitting_func_type        if fitting_func_type == "without_VB":            self.micro_params = {'K1': None,                                 'k2': None}            self.f_to_fit = model_without_VB                    elif fitting_func_type == "with_fixed_VB":            self.micro_params = {'K1': None,                                 'k2': None}            self.f_to_fit = model_with_fixed_VB                    elif fitting_func_type == "variable_VB":            self.micro_params = {'K1': None,                                 'k2': None,                                 'VB': None}            self.f_to_fit = model_with_variable_VB                    self.num_micro_params = len(self.micro_params)                self.macro_params = {'VD': None}        self.param_unit = {'K1': 'mL/min/mL',                           'k2': '/min',                           'VB': 'unitless',                           'VD': 'unitless'}        self.name = '1TCM'            def fit(self):                        self.fit_nonlinear()        self.generate_fitted_tacs()        self.calculate_fitness_measures()                        # set macro params        VD_arr = np.zeros(self.tacs.num_elements)        for i in range(self.tacs.num_elements):            K1 = self.get_parameter('K1')[i]            k2 = self.get_parameter('k2')[i]                        VD = K1/k2                        VD_arr[i] = VD                self.set_parameter('VD', VD_arr, 'macro')                return None                